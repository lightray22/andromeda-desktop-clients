name: Master CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc
          - os: ubuntu-22.04
            compiler: clang
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: macos-13
            compiler: clang
          - os: macos-latest
            compiler: clang
          - os: windows-2019
            compiler: msvc
          - os: windows-latest
            compiler: msvc

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Install (ubuntu-old)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt install -y make cmake g++ clang python3 libssl-dev libcrypt-dev libfuse-dev qtbase5-dev libsqlite3-dev libsodium-dev
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo CC=clang >> $GITHUB_ENV; echo CXX=clang++ >> $GITHUB_ENV
        fi
    - name: Install (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y make cmake g++ clang clang-tidy cppcheck python3 libssl-dev libcrypt-dev libfuse3-dev qt6-base-dev libsqlite3-dev libsodium-dev
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo CC=clang >> $GITHUB_ENV; echo CXX=clang++ >> $GITHUB_ENV
        fi
    - name: Install (macos)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
      run: |
        brew update
        brew install bash cmake openssl macfuse qt sqlite3 libsodium
    - name: Install Qt (windows)
      if: matrix.os == 'windows-2019' || matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.1'
    - name: Install (windows)
      if: matrix.os == 'windows-2019' || matrix.os == 'windows-latest'
      run: |
        choco install openssl winfsp -y
        Add-Content $env:GITHUB_PATH "C:\Program Files (x86)\WinFsp\bin"
        Set-Location $env:RUNNER_TEMP; pwd; mkdir sqlite; cd sqlite
        Invoke-WebRequest -Uri https://www.sqlite.org/2023/sqlite-amalgamation-3420000.zip -OutFile sqlite-headers.zip
        Invoke-WebRequest -Uri https://www.sqlite.org/2023/sqlite-dll-win64-x64-3420000.zip -OutFile sqlite-dll.zip
        Expand-Archive sqlite-headers.zip -DestinationPath .
        Rename-Item sqlite-amalgamation-3420000 include
        Expand-Archive sqlite-dll.zip -DestinationPath lib
        cd lib; lib /DEF:sqlite3.def /OUT:sqlite3.lib /MACHINE:x64; cd ..; cd ..
        Invoke-WebRequest -Uri https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable-msvc.zip -OutFile sodium.zip
        Expand-Archive sodium.zip -DestinationPath .

    - name: Build and Test (ubuntu-old)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        tools/buildrel -DTESTS_CATCH2=1 -DTESTS_CLANGTIDY=0 -DTESTS_CPPCHECK=0
    - name: Build and Test (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        tools/buildrel -DTESTS_CATCH2=1 -DTESTS_CLANGTIDY=1 -DTESTS_CPPCHECK=1 -DOPENGL_INCLUDE_DIR=/usr/include 
    - name: Build and Test (macos-latest)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
      run: |
        tools/buildrel -DTESTS_CATCH2=1 -DTESTS_CLANGTIDY=0 -DTESTS_CPPCHECK=0
    - name: Build and Test (windows)
      if: matrix.os == 'windows-2019' || matrix.os == 'windows-latest'
      run: |
        mkdir build; cd build
        $env:SQLITE3_ROOT_DIR = $env:RUNNER_TEMP+"\sqlite"; Write-Output $env:SQLITE3_ROOT_DIR
        $env:sodium_DIR = $env:RUNNER_TEMP+"\libsodium"; Write-Output $env:sodium_DIR
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="../install" -DTESTS_CATCH2=1
        cmake --build . --config Release
# TODO TESTS_CATCH2=1 -> segfault in sqlite3_open() ???
# TODO && cmake --install . -> Could not resolve runtime dependencies: libsodium.dll sqlite3.dll

    - name: Execute --version (ubuntu)
      if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-latest'
      run: |
        build-Release/bin/cli/andromeda-cli --version
        build-Release/bin/fuse/andromeda-fuse --version
        build-Release/bin/gui/andromeda-gui --version
    - name: Execute --version (macos)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
      run: |
        build-Release/bin/cli/andromeda-cli --version
        build-Release/bin/fuse/andromeda-fuse --version
        build-Release/bin/gui/andromeda-gui.app/Contents/MacOS/andromeda-gui --version
#    - name: Execute --version (windows)
#      if: matrix.os == 'windows-2019' || matrix.os == 'windows-latest'
#      run: |
#        install/bin/andromeda-cli.exe --version
#        install/bin/andromeda-fuse.exe --version
#        install/bin/andromeda-gui.exe --version
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:cpp"
